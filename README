1. Start an app for to-do lists, 'python manage.py startapp lists'
2. invoke django test runner, 'python manage.py test'
3. See git difference: git diff
4. Git comment with comment: git commit -a
5. Django's ORM tutorial: https://docs.djangoproject.com/en/1.7/intro/tutorial01/
6. lower level unit tests in lists folder: python3 manage.py test lists
7.  Get git status:  git status
8. Add git item:  git add xxx
9. Git comment with comment online: git commit -m "xxxxxx"
10. Add tag to git:  git tag end-of-chapter-05
11. Build physical DB:  python3 manage.py migrate
12:  page 78: __init__.py is needed for python package(app)
13. Git move:  git mv  xxx.py   yyy.py
14.  show git diff after git add for detecting moves:  git diff --staged -M
15. Git tag: git tag xxx
16.  ORM modeling DB based on models.py:  python3 manage.py makemigrations
17.  page 109 reverse lookup:  .item_set
18.  git commit with comment without using add:  git commit -am xxx
19.  To avoid using hardcoded 8000 on http: use live_server_url in self.browser.get
20.  To blows away all uncommitted changes:  git reset --hard
21.  To install unix like util using brew: brew install xxx
22.  https://coolestguidesontheplanet.com/installing-homebrew-os-x-yosemite-10-10-package-manager-unix-apps/
23. bootstrap's docs, LESS, pseudo-CSS-alikes:  http://coding.smashingmagazine.com/2013/03/12/customizing-bootstrap
24.  git diff ignore white space:  git diff -b
25. bootstrap doc: http://getbootstrap.com/
26. code: https://github.com/hjwp/book-example/tree/chapter_03
27. git add and status for showing diff even after git add: git add .; git status
28. execute collectstatic noinput: python3 manage.py collectstatic --noinput
29.  Github accoutn:  mkwokgithub yukkwok99@gmail.com dkue8763j https://github.com/issues
30.  liveserver option removed:  https://docs.djangoproject.com/en/1.11/releases/1.11/.  Therefore need to uninstall 1.11.x version and re-install 1.10 as venu or virtualenv mode (in ubuntu-mkwok): pip3 install django==1.10
31.  For live_server_url issue in chapter 8, see:  https://groups.google.com/forum/#!topic/obey-the-testing-goat-book/pokPKQQB2J8 and https://groups.google.com/forum/#!topic/obey-the-testing-goat-book/L-1oqyDcQIc
32. git push add remote: git remote add origin https://github.com/mkwokgithub/django-tdd.git
32. git push: git push -u origin master (see page 144 in book to see example of using "git pull"
33. VM Vsphere:  https://172.23.192.242/vsphere-client administrator@vsphere.local Nmsc!234 172.23.192.177
34. restart gunicon: ../virtualenv/bin/gunicorn --bind unix:/tmp/ssat-nms-vm7.cisco.com.socket superlists.wsgi:application
35. start/reload nginx: service nginx start;service nginx reload
	a. install nginx: apt-get install nginx (linux) 
35. Fabric(deployment automation) install:  pip3 install fabric3
36. See git history:  git log --graph --oneline --decorate
37.  about with: http://preshing.com/20110920/the-python-with-statement-by-example/
38.  for lamda:  http://www.secnetix.de/olli/Python/lambda_functions.hawk
39. install virtualenv on linux:  pip3 install virtualenv
40. test functional_tests on book writer's staging machine: python3 manage.py test functional_tests --liveserver=superlists-staging.ottg.eu
41. test functional_tests again ssat-nms-vm7.cisco.com, follow item 40 and replace superlists-staging.ottg.eu by ssat-nms-vm7.cisco.com
42. Build physical DB without input: python3 manage.py migrate --noinput
43. Steps to install and setup virtualenv on ssat-nms-vm7 as ubuntu-mkwok user:
	a. install virtualenv: sudo  pip3 install virtualenv
	b. setup virtualenv for "virtualenv" folder of sites/ssat-nms-vm7.cisco.com:  virtualenv --python=python3 ../virtualenv
	c. source activate:  source ../virtualenv/bin/activate
44.  Steps to get code onto the server:
	a. ssh to ubuntu-mkwok; cd /home/ubuntu-mkwok/sites
	b. export SITENAME=ssat-nms-vm7.cisco.com
	c. mkdir -p ~/sites/$SITENAME/database  
	d. mkdir -p ~/sites/$SITENAME/static  
	e. mkdir -p ~/sites/$SITENAME/virtualenv
	f. git clone https://github.com/mkwokgithub/django-tdd.git ~/sites/$SITENAME/source 
	g. setup virtualenv (show in above)
	h. install django 1.10 (shown in above) as virtualenv mode

45. Steps to collect needed packages for virtualenv:
	a. in virtualenv mode, pip3 freeze > requirement.txt
46. Steps to recreate needed package for virtualenv:
	a. In virtualenv mode, pip3 install -r requirement.txt 

47. Steps to configure nginx to proxy incoming requests to other destination where the django will respond.
	a. edit file /etc/nginx/sites-available/ssat-nms-vm7.cisco.com as the following:


server {
	listen 80;  #nginx listens to port 80
        ## listen [::]:80;

	server_name ssat-nms-vm7.cisco.com;

	## root /var/www/example.com;
	## index index.html;


	location /static {
		alias /home/ubuntu-mkwok/sites/ssat-nms-vm7.cisco.com/static;
	}

	location / {
		proxy_set_header Host $host;
		proxy_pass http://unix:/tmp/ssat-nms-vm7.cisco.com.socket;	
		## proxy_pass http://localhost:8000;  # nginx proxy all requests
 to local port 8000 where it expect Django waiting to respond to requests
	}
}

	b. create a soft link to link the above file to a file name in /etc/nginx/sites-enable:  ln -s /etc/nginx/sites-available/ssat-nms-vm7.cisco.com  /etc/nginx/sites-enabled/ssat-nms-vm7.cisco.com
	c. need to remove /etc/nginx/sites-enabled/default
	d. reload nginx:  service nginx reload

48. What is the difference between nginx and gunicorn:
	a. Nginx is a web server and reverse-proxy responsible for serving static content, gzip compression, ssl, proxy_buffers and other HTTP stuff 
	b. gunicorn is a Python HTTP server that interfaces with both nginx and your actual python web-app code to serve dynamic content.
	c. Read https://www.quora.com/What-are-the-differences-between-nginx-and-gunicorn
49. Start up gunicorn with path to WSGI server (included in wsgi.py of superlists):
	a. ../virtualenv/bin/gunicorn superlists.wsgi:application

50. Getting nginx to server static files:
	a. edit /etc/nginx/sites-available/ssat-nms-vm7.cisco.com  to add the following:
			location /static {
		alias /home/ubuntu-mkwok/sites/ssat-nms-vm7.cisco.com/static;
	}
	b. collect static:  ../virtualenv/bin/python3 manage.py collectstatic --noinput
	c. reload nginx:  sudo service nginx reload
	d. restart gunicorn with path to wsgi application:  ../virtualenv/bin/gunicorn superlists.wsgi:application

51. Configure nginx and gunicorn to use unix domain sockets, and so we an avoid port 8000:
	a. add the following to /etc/nginx/sites-available/ssat-nms-vm7.cisco.com :

	location / {
		proxy_set_header Host $host;
		proxy_pass http://unix:/tmp/ssat-nms-vm7.cisco.com.socket;	
	}
	b. config gunicorn to listen to socket:
		sudo service nginx reload
		../virtualenv/bin/gunicorn --bind unix:/tmp/ssat-nms-vm7.cisco.com.socket superlists.wsgi:application

52.  Create DB on deployment server:  ../virtualenv/bin/python3 manage.py migrate --noinput

53.  turn off DEBUG and config ALLOWED_HOSTS in superlists/settings.py.  Then restart gunicorn

54.  Create automatic deployment enviroment:
	a. install fabric (see above)
	b. create file fabfile.py in deploy_tools/ folder
	c. cd deploy_tools and run: fab deploy:host=ubuntu-mkwok@ssat-nms-vm7.cisco.com  (will ask pwd which is lablab)
	d. you can rerun the above command if there is new stuff in githube 
